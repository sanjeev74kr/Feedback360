# Answers

**Section I:  Database Design**

For the given requirement, I will create the following collections:

1. restaurants collection
2. reviews collection

- restaurants collection

| Attribute | Data Type |
| --- | --- |
| id | ObjectId |
| name | string |
| address | string |
| description | string |
- reviews  collection

| Attribute | Data Type |
| --- | --- |
| id | ObjectId |
| restaurantId | ObjectId |
| reviewText | string |

The restaurants and reviews collections will be related to each other at the database level by the restaurantId attribute in the reviews collection, which will reference the id attribute in the restaurants collection.

1. How the model is connected→ code is available in models folder.

1. For Admin analytics

```
import {IRestaurant,restaurantModel} from '../models/restaurant_model';

export const getAnalytics= async()=>{
    try {
        const restaurants = await restaurantModel.aggregate([
          {
            $lookup: {
              from: 'reviews',
              localField: '_id',
              foreignField: 'restaurantId',
              as: 'reviews',
            },
          },
          {
            $group: {
              _id: '$_id',
              restaurantId:{ $first: '$_id' },
              name: { $first: '$name' },
              reviewCount: { $sum: 1 },
            },
          },
          {
            $project: {
              ID: '$restaurantId',
            RestaurantName: '$name',
            TotalReviews: '$reviewCount',
            },
          },
        ]);
        return restaurants;

}
catch(error){
    console.log(error);
}
}
```

**Section II**

Restful API design

| HTTP Verb | API Endpoint | Brief Description |
| --- | --- | --- |
| GET | /restaurants | Get a list of all restaurants |
| GET | /restaurants/:_id | Get the details of a single restaurant, including all reviews |
| POST | /restaurants/:_id/review | Submit a review for a restaurant |
| POST | /restaurants/post | Save a new restaurant |
| GET | /admin/analytics | Get analytics of all restaurants |

**Sectio III → ES6 Basics**

1. 
const result1 = a.filter((_, index) => index % 2 === 0);

2. 
const result2 = a.map(x => x * x);

3. 
const result3 = a.filter((_, index) => index % 2 === 0).map(x => x * x);
